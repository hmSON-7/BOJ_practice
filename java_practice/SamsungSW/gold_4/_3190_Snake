package gold_4;

import java.io.*;
import java.util.*;

public class _3190_Snake {
    static int n, appleCnt, cmdCnt;
    static int[] dy = {-1, 0, 1, 0}, dx = {0, 1, 0, -1};
    static char[][] map;
    static int[][] cmds;
    public static void main(String[] args) throws Exception {
        init(); move();
    }

    private static void init() throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        n = Integer.parseInt(br.readLine());
        map = new char[n][n];
        appleCnt = Integer.parseInt(br.readLine());
        StringTokenizer st;
        for(int i=0; i<appleCnt; i++) {
            st = new StringTokenizer(br.readLine());
            int appleY = Integer.parseInt(st.nextToken()) - 1;
            int appleX = Integer.parseInt(st.nextToken()) - 1;
            map[appleY][appleX] = 'a';
        }
        cmdCnt = Integer.parseInt(br.readLine());
        cmds = new int[cmdCnt][2];
        for(int i=0; i<cmdCnt; i++) {
            st = new StringTokenizer(br.readLine());
            cmds[i][0] = Integer.parseInt(st.nextToken());
            cmds[i][1] = st.nextToken().charAt(0) == 'D' ? 1 : -1;
        }
    }

    private static void move() {
        int timeCnt = 0, currY = 0, currX = 0, cmdIdx = 0, currDir = 1;
        map[0][0] = 's';
        Queue<int[]> q = new ArrayDeque<>();
        q.add(new int[]{0, 0});
        while(true) {
            timeCnt++;
            int newY = currY + dy[currDir];
            int newX = currX + dx[currDir];
            if(newY < 0 || newX < 0 || newY >= n || newX >= n) break;
            char next = map[newY][newX];
            if(next == 's') break;
            q.add(new int[]{newY, newX});
            boolean appleFlag = next == 'a';
            if(!appleFlag) {
                int[] tail = q.poll();
                map[tail[0]][tail[1]] = '0';
            }
            map[newY][newX] = 's';
            currY = newY; currX = newX;

            if(cmdIdx < cmdCnt && cmds[cmdIdx][0] == timeCnt) {
                currDir = (currDir + cmds[cmdIdx][1] + 4) % 4;
                cmdIdx++;
            }
        }
        System.out.println(timeCnt);
    }
}
